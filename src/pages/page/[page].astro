---
import { getCollection } from "astro:content";
import BaseHead from "../../components/BaseHead.astro";
import Header from "../../components/Header.astro";
import Footer from "../../components/Footer.astro";
import { SITE_TITLE, SITE_DESCRIPTION } from "../../consts";
import FormattedDate from "../../components/FormattedDate.astro";
import Card from "../../components/ui/Card.astro";
import CardHeader from "../../components/ui/CardHeader.astro";
import CardTitle from "../../components/ui/CardTitle.astro";
import CardContent from "../../components/ui/CardContent.astro";
import Badge from "../../components/ui/Badge.astro";
import Button from "../../components/ui/Button.astro";

import Pagination from "../../components/Pagination.astro";

export const POSTS_PER_PAGE = 10;

export async function getStaticPaths() {
  const allPosts = (await getCollection("blog")).sort(
    (a, b) => b.data.pubDate.valueOf() - a.data.pubDate.valueOf()
  );

  const totalPages = Math.ceil(allPosts.length / POSTS_PER_PAGE);
  const paths = [];

  for (let i = 2; i <= totalPages; i++) {
    const startIndex = (i - 1) * POSTS_PER_PAGE;
    const endIndex = startIndex + POSTS_PER_PAGE;
    const posts = allPosts.slice(startIndex, endIndex);

    paths.push({
      params: { page: i.toString() },
      props: {
        posts,
        currentPage: i,
        totalPages,
        allPosts,
      },
    });
  }

  return paths;
}

const { posts, currentPage, totalPages, allPosts } = Astro.props;

// Get all unique tags
const allTags = [
  ...new Set(allPosts.flatMap((post: any) => post.data.tags || [])),
].sort();

// Count posts per tag
const tagCounts: Record<string, number> = allTags.reduce(
  (acc: Record<string, number>, tag: string) => {
    const count = allPosts.filter((post: any) =>
      post.data.tags?.includes(tag)
    ).length;
    acc[tag] = count;
    return acc;
  },
  {}
);
---

<!doctype html>
<html lang="en">
  <head>
    <BaseHead
      title={`Page ${currentPage} - ${SITE_TITLE}`}
      description={SITE_DESCRIPTION}
    />
  </head>
  <body class="min-h-screen bg-background font-sans antialiased flex flex-col">
    <Header />
    <div
      class="container grid grid-cols-1 gap-12 md:grid-cols-[220px_1fr] lg:grid-cols-[240px_1fr] py-8 flex-1"
    >
      {
        allTags.length > 0 && (
          <aside class="hidden w-full flex-col md:flex">
            <Card>
              <CardHeader>
                <CardTitle>Tags</CardTitle>
              </CardHeader>
              <CardContent>
                <div class="space-y-2">
                  <Button
                    variant="outline"
                    size="sm"
                    class="w-full justify-between"
                    asChild
                  >
                    <a href="/" class="font-medium">
                      <span>All Posts</span>
                      <Badge variant="secondary" class="ml-auto">
                        {allPosts.length}
                      </Badge>
                    </a>
                  </Button>
                  {allTags.map((tag) => (
                    <Button
                      variant="ghost"
                      size="sm"
                      class="w-full justify-between"
                      asChild
                    >
                      <a href="/">
                        <span>{tag}</span>
                        <Badge variant="secondary" class="ml-auto">
                          {tagCounts[tag]}
                        </Badge>
                      </a>
                    </Button>
                  ))}
                </div>
              </CardContent>
            </Card>
          </aside>
        )
      }
      <main class="space-y-6">
        <div class="space-y-8">
          <div class="text-center mb-8">
            <h1 class="text-4xl font-bold mb-4">Blog</h1>
            <p class="text-lg text-muted-foreground">
              Welcome to my blog! Here you'll find articles about web
              development, technology, and other topics I'm passionate about.
            </p>
            <p class="text-sm text-muted-foreground mt-2">
              Page {currentPage} of {totalPages}
            </p>
          </div>

          <div class="space-y-6">
            {
              posts.map((post: any) => (
                <article class="border-b border-border pb-6 last:border-b-0">
                  <a href={`/blog/${post.id}/`} class="block group">
                    <h2 class="text-2xl font-semibold mb-2 group-hover:text-primary transition-colors">
                      {post.data.title}
                    </h2>
                    <div class="text-sm text-muted-foreground mb-3">
                      <FormattedDate date={post.data.pubDate} />
                    </div>
                    <p class="text-muted-foreground mb-4 leading-relaxed">
                      {post.data.description}
                    </p>
                    {post.data.tags && post.data.tags.length > 0 && (
                      <div class="flex flex-wrap gap-2">
                        {post.data.tags.map((tag: string) => (
                          <Badge variant="outline" size="sm" asChild>
                            <a
                              href="/"
                              class="badge-tag hover:bg-primary hover:text-primary-foreground transition-colors"
                            >
                              {tag}
                            </a>
                          </Badge>
                        ))}
                      </div>
                    )}
                  </a>
                </article>
              ))
            }
          </div>
          <Pagination
            currentPage={currentPage}
            totalPages={totalPages}
            baseUrl="/"
          />
        </div>
      </main>
    </div>
    <Footer />
  </body>
</html>
