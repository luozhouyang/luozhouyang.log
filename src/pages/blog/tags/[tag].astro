---
import BaseHead from '../../../components/BaseHead.astro';
import Header from '../../../components/Header.astro';
import Footer from '../../../components/Footer.astro';
import { SITE_TITLE, SITE_DESCRIPTION } from '../../../consts';
import { getCollection } from 'astro:content';
import FormattedDate from '../../../components/FormattedDate.astro';
import { Image } from 'astro:assets';
import Card from '../../../components/ui/Card.astro';
import CardHeader from '../../../components/ui/CardHeader.astro';
import CardTitle from '../../../components/ui/CardTitle.astro';
import CardDescription from '../../../components/ui/CardDescription.astro';
import CardContent from '../../../components/ui/CardContent.astro';
import CardFooter from '../../../components/ui/CardFooter.astro';
import Badge from '../../../components/ui/Badge.astro';
import Button from '../../../components/ui/Button.astro';

export async function getStaticPaths() {
  const posts = await getCollection('blog');
  const tags = [...new Set(posts.flatMap(post => post.data.tags || []))];
  
  return tags.map(tag => ({
    params: { tag },
    props: { posts: posts.filter(post => post.data.tags?.includes(tag)) }
  }));
}

const { tag } = Astro.params;
const { posts } = Astro.props;

// Get all blog posts for counts
const allPosts = await getCollection('blog');

// Get all unique tags for the sidebar
const allTags = [...new Set(allPosts.flatMap(post => post.data.tags || []))].sort();

// Count posts per tag
const tagCounts: Record<string, number> = allTags.reduce((acc: Record<string, number>, tag: string) => {
  const count = allPosts.filter(post => post.data.tags?.includes(tag)).length;
  acc[tag] = count;
  return acc;
}, {});

// Sort posts by date
const sortedPosts = posts.sort((a, b) => b.data.pubDate.valueOf() - a.data.pubDate.valueOf());
---

<!doctype html>
<html lang="en">
	<head>
		<BaseHead title={`${tag} - ${SITE_TITLE}`} description={SITE_DESCRIPTION} />
	</head>
	<body class="min-h-screen bg-background font-sans antialiased">
		<Header />
		<div class="container grid grid-cols-1 gap-12 md:grid-cols-[220px_1fr] lg:grid-cols-[240px_1fr] py-8">
			{allTags.length > 0 && (
				<aside class="hidden w-full flex-col md:flex">
					<Card>
						<CardHeader>
							<CardTitle>Tags</CardTitle>
						</CardHeader>
						<CardContent>
							<div class="space-y-2">
								<Button variant="outline" size="sm" class="w-full justify-between" asChild>
									<a href="/blog/" class="font-medium">
										<span>All Posts</span>
										<Badge variant="secondary" class="ml-auto">{allPosts.length}</Badge>
									</a>
								</Button>
								{allTags.map(tagName => (
									<Button 
										variant={tagName === tag ? "default" : "ghost"} 
										size="sm" 
										class="w-full justify-between" 
										asChild
									>
										<a href={`/blog/tags/${tagName}`}>
											<span>{tagName}</span>
											<Badge variant="secondary" class="ml-auto">{tagCounts[tagName]}</Badge>
										</a>
									</Button>
								))}
							</div>
						</CardContent>
					</Card>
				</aside>
			)}
			<main class="space-y-6">
				<div class="space-y-8">
					<div class="text-center mb-8">
						<h1 class="text-4xl font-bold mb-4">Posts tagged with "{tag}"</h1>
						<p class="text-lg text-muted-foreground">
							Browse all posts related to {tag}. Found {sortedPosts.length} {sortedPosts.length === 1 ? 'post' : 'posts'}.
						</p>
					</div>
					<div class="space-y-6">
						{sortedPosts.map((post) => (
							<article class="border-b border-border pb-6 last:border-b-0">
								<a href={`/blog/${post.id}/`} class="block group">
									<h2 class="text-2xl font-semibold mb-2 group-hover:text-primary transition-colors">
										{post.data.title}
									</h2>
									<div class="text-sm text-muted-foreground mb-3">
										<FormattedDate date={post.data.pubDate} />
									</div>
									<p class="text-muted-foreground mb-4 leading-relaxed">
										{post.data.description}
									</p>
									{post.data.tags && post.data.tags.length > 0 && (
										<div class="flex flex-wrap gap-2">
											{post.data.tags.map(tagName => (
												<Badge variant="outline" size="sm" asChild>
													<a href={`/blog/tags/${tagName}`} class="hover:bg-primary hover:text-primary-foreground transition-colors">{tagName}</a>
												</Badge>
											))}
										</div>
									)}
								</a>
							</article>
						))}
					</div>
				</div>
			</main>
		</div>
		<Footer />
	</body>
</html>