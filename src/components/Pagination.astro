---
import Button from './ui/Button.astro';

interface Props {
  currentPage: number;
  totalPages: number;
  baseUrl?: string;
}

const { currentPage, totalPages, baseUrl = '/' } = Astro.props;

// Generate page numbers to show
function getPageNumbers(current: number, total: number) {
  const pages: (number | string)[] = [];
  
  if (total <= 7) {
    // Show all pages if total is 7 or less
    for (let i = 1; i <= total; i++) {
      pages.push(i);
    }
  } else {
    // Always show first page
    pages.push(1);
    
    if (current > 3) {
      pages.push('...');
    }
    
    // Show pages around current page
    const start = Math.max(2, current - 1);
    const end = Math.min(total - 1, current + 1);
    
    for (let i = start; i <= end; i++) {
      if (i !== 1 && i !== total) {
        pages.push(i);
      }
    }
    
    if (current < total - 2) {
      pages.push('...');
    }
    
    // Always show last page if total > 1
    if (total > 1) {
      pages.push(total);
    }
  }
  
  return pages;
}

const pageNumbers = getPageNumbers(currentPage, totalPages);

function getPageUrl(page: number) {
  if (page === 1) {
    return baseUrl;
  }
  return `${baseUrl}${baseUrl.endsWith('/') ? '' : '/'}page/${page}`;
}
---

{totalPages > 1 && (
  <nav class="flex justify-center items-center space-x-2 mt-8" aria-label="Pagination">
    <!-- Previous button -->
    {currentPage > 1 ? (
      <Button variant="outline" size="sm" asChild>
        <a href={getPageUrl(currentPage - 1)} aria-label="Previous page" class="flex items-center gap-2">
          <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 19l-7-7 7-7"></path>
          </svg>
          {/* <span>Previous</span> */}
        </a>
      </Button>
    ) : (
      <Button variant="outline" size="sm" disabled class="flex items-center gap-2">
        <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 19l-7-7 7-7"></path>
        </svg>
        {/* <span>Previous</span> */}
      </Button>
    )}
    
    <!-- Page numbers -->
    <div class="flex items-center gap-2">
      {pageNumbers.map((page, index) => (
        page === '...' ? (
          <span class={`h-9 px-4 rounded-md flex items-center justify-center text-sm font-medium text-muted-foreground`}>...</span>
        ) : page === currentPage ? (
          <Button variant="default" size="sm" aria-current="page" class="px-4">
            {page}
          </Button>
        ) : (
          <Button variant="outline" size="sm" asChild class="px-4">
            <a href={getPageUrl(page as number)} aria-label={`Go to page ${page}`}>
              {page}
            </a>
          </Button>
        )
      ))}
    </div>
    
    <!-- Next button -->
    {currentPage < totalPages ? (
      <Button variant="outline" size="sm" asChild>
        <a href={getPageUrl(currentPage + 1)} aria-label="Next page" class="flex items-center gap-2">
          {/* <span>Next</span> */}
          <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7"></path>
          </svg>
        </a>
      </Button>
    ) : (
      <Button variant="outline" size="sm" disabled class="flex items-center gap-2">
        {/* <span>Next</span> */}
        <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7"></path>
        </svg>
      </Button>
    )}
  </nav>
)}