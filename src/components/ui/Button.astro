---
type VariantType = 'default' | 'destructive' | 'outline' | 'secondary' | 'ghost' | 'link';
type SizeType = 'default' | 'sm' | 'lg' | 'icon';

interface Props {
  variant?: VariantType;
  size?: SizeType;
  class?: string;
  as?: string;
  href?: string;
  [key: string]: any;
}

const {
  variant = 'default',
  size = 'default',
  class: className = '',
  as: Component = 'button',
  ...rest
} = Astro.props;

const variantClasses: Record<VariantType, string> = {
  default: 'bg-primary text-primary-foreground hover:bg-primary/90',
  destructive: 'bg-destructive text-destructive-foreground hover:bg-destructive/90',
  outline: 'border border-input bg-background hover:bg-accent hover:text-accent-foreground',
  secondary: 'bg-secondary text-secondary-foreground hover:bg-secondary/80',
  ghost: 'hover:bg-accent hover:text-accent-foreground',
  link: 'text-primary underline-offset-4 hover:underline',
};

const sizeClasses: Record<SizeType, string> = {
  default: 'h-10 px-4 py-2',
  sm: 'h-9 rounded-md px-3',
  lg: 'h-11 rounded-md px-8',
  icon: 'h-10 w-10',
};

const classes = [
  'inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50',
  variantClasses[variant as VariantType],
  sizeClasses[size as SizeType],
  className,
].join(' ');
---

{Component === 'a' ? (
  <a class={classes} href={rest.href} {...rest}>
    <slot />
  </a>
) : (
  <button class={classes} type={rest.type || 'button'} {...rest}>
    <slot />
  </button>
)}